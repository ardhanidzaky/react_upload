{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport { useDropzone } from 'react-dropzone-esm';\nimport { createVarsResolver, getRadius, factory, useProps, useStyles, Box, LoadingOverlay } from '@mantine/core';\nimport { assignRef } from '@mantine/hooks';\nimport { DropzoneProvider } from './Dropzone.context.mjs';\nimport { DropzoneAccept, DropzoneIdle, DropzoneReject } from './DropzoneStatus.mjs';\nimport classes from './Dropzone.module.css.mjs';\nconst defaultProps = {\n  loading: false,\n  multiple: true,\n  maxSize: Infinity,\n  autoFocus: false,\n  activateOnClick: true,\n  activateOnDrag: true,\n  dragEventsBubbling: true,\n  activateOnKeyboard: true,\n  useFsAccessApi: true,\n  variant: \"light\",\n  rejectColor: \"red\"\n};\nconst varsResolver = createVarsResolver((theme, {\n  radius,\n  variant,\n  acceptColor,\n  rejectColor\n}) => {\n  const acceptColors = theme.variantColorResolver({\n    color: acceptColor || theme.primaryColor,\n    theme,\n    variant\n  });\n  const rejectColors = theme.variantColorResolver({\n    color: rejectColor || \"red\",\n    theme,\n    variant\n  });\n  return {\n    root: {\n      \"--dropzone-radius\": getRadius(radius),\n      \"--dropzone-accept-color\": acceptColors.color,\n      \"--dropzone-accept-bg\": acceptColors.background,\n      \"--dropzone-reject-color\": rejectColors.color,\n      \"--dropzone-reject-bg\": rejectColors.background\n    }\n  };\n});\nconst Dropzone = factory((_props, ref) => {\n  const props = useProps(\"Dropzone\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    radius,\n    disabled,\n    loading,\n    multiple,\n    maxSize,\n    accept,\n    children,\n    onDropAny,\n    onDrop,\n    onReject,\n    openRef,\n    name,\n    maxFiles,\n    autoFocus,\n    activateOnClick,\n    activateOnDrag,\n    dragEventsBubbling,\n    activateOnKeyboard,\n    onDragEnter,\n    onDragLeave,\n    onDragOver,\n    onFileDialogCancel,\n    onFileDialogOpen,\n    preventDropOnDocument,\n    useFsAccessApi,\n    getFilesFromEvent,\n    validator,\n    rejectColor,\n    acceptColor,\n    enablePointerEvents,\n    loaderProps,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Dropzone\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  const {\n    getRootProps,\n    getInputProps,\n    isDragAccept,\n    isDragReject,\n    open\n  } = useDropzone({\n    onDrop: onDropAny,\n    onDropAccepted: onDrop,\n    onDropRejected: onReject,\n    disabled: disabled || loading,\n    accept: Array.isArray(accept) ? accept.reduce((r, key) => ({\n      ...r,\n      [key]: []\n    }), {}) : accept,\n    multiple,\n    maxSize,\n    maxFiles,\n    autoFocus,\n    noClick: !activateOnClick,\n    noDrag: !activateOnDrag,\n    noDragEventsBubbling: !dragEventsBubbling,\n    noKeyboard: !activateOnKeyboard,\n    onDragEnter,\n    onDragLeave,\n    onDragOver,\n    onFileDialogCancel,\n    onFileDialogOpen,\n    preventDropOnDocument,\n    useFsAccessApi,\n    validator,\n    ...(getFilesFromEvent ? {\n      getFilesFromEvent\n    } : null)\n  });\n  assignRef(openRef, open);\n  const isIdle = !isDragAccept && !isDragReject;\n  return /* @__PURE__ */React.createElement(DropzoneProvider, {\n    value: {\n      accept: isDragAccept,\n      reject: isDragReject,\n      idle: isIdle\n    }\n  }, /* @__PURE__ */React.createElement(Box, {\n    ...getRootProps({\n      ref\n    }),\n    ...getStyles(\"root\", {\n      focusable: true\n    }),\n    ...others,\n    mod: {\n      accept: isDragAccept,\n      reject: isDragReject,\n      idle: isIdle,\n      loading,\n      \"activate-on-click\": activateOnClick\n    }\n  }, /* @__PURE__ */React.createElement(LoadingOverlay, {\n    visible: loading,\n    overlayProps: {\n      radius\n    },\n    unstyled,\n    loaderProps\n  }), /* @__PURE__ */React.createElement(\"input\", {\n    ...getInputProps(),\n    name\n  }), /* @__PURE__ */React.createElement(\"div\", {\n    ...getStyles(\"inner\"),\n    \"data-enable-pointer-events\": enablePointerEvents || void 0\n  }, children)));\n});\nDropzone.classes = classes;\nDropzone.displayName = \"@mantine/dropzone/Dropzone\";\nDropzone.Accept = DropzoneAccept;\nDropzone.Idle = DropzoneIdle;\nDropzone.Reject = DropzoneReject;\nexport { Dropzone };","map":{"version":3,"names":["defaultProps","loading","multiple","maxSize","Infinity","autoFocus","activateOnClick","activateOnDrag","dragEventsBubbling","activateOnKeyboard","useFsAccessApi","variant","rejectColor","varsResolver","createVarsResolver","theme","radius","acceptColor","acceptColors","variantColorResolver","color","primaryColor","rejectColors","root","getRadius","background","Dropzone","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","disabled","accept","children","onDropAny","onDrop","onReject","openRef","name","maxFiles","onDragEnter","onDragLeave","onDragOver","onFileDialogCancel","onFileDialogOpen","preventDropOnDocument","getFilesFromEvent","validator","enablePointerEvents","loaderProps","others","getStyles","useStyles","classes","getRootProps","getInputProps","isDragAccept","isDragReject","open","useDropzone","onDropAccepted","onDropRejected","Array","isArray","reduce","r","key","noClick","noDrag","noDragEventsBubbling","noKeyboard","assignRef","isIdle","React","createElement","DropzoneProvider","value","reject","idle","Box","focusable","mod","LoadingOverlay","visible","overlayProps","displayName","Accept","DropzoneAccept","Idle","DropzoneIdle","Reject","DropzoneReject"],"sources":["/Users/finazaria/Documents/TA Code - Interface/thesis-ortho-proto/react_upload/node_modules/@mantine/dropzone/src/Dropzone.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Accept,\n  DropEvent,\n  FileError,\n  FileRejection,\n  FileWithPath,\n  useDropzone,\n} from 'react-dropzone-esm';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  getRadius,\n  LoaderProps,\n  LoadingOverlay,\n  MantineColor,\n  MantineRadius,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '@mantine/core';\nimport { assignRef } from '@mantine/hooks';\nimport { DropzoneProvider } from './Dropzone.context';\nimport type { DropzoneFullScreenType } from './DropzoneFullScreen';\nimport { DropzoneAccept, DropzoneIdle, DropzoneReject } from './DropzoneStatus';\nimport classes from './Dropzone.module.css';\n\nexport type DropzoneStylesNames = 'root' | 'inner';\nexport type DropzoneVariant = 'filled' | 'light';\nexport type DropzoneCssVariables = {\n  root:\n    | '--dropzone-radius'\n    | '--dropzone-accept-color'\n    | '--dropzone-accept-bg'\n    | '--dropzone-reject-color'\n    | '--dropzone-reject-bg';\n};\n\nexport interface DropzoneProps\n  extends BoxProps,\n    StylesApiProps<DropzoneFactory>,\n    ElementProps<'div', 'onDrop'> {\n  /** Key of `theme.colors` or any valid CSS color to set colors of `Dropzone.Accept`, `theme.primaryColor` by default */\n  acceptColor?: MantineColor;\n\n  /** Key of `theme.colors` or any valid CSS color to set colors of `Dropzone.Reject`, `'red'` by default */\n  rejectColor?: MantineColor;\n\n  /** Key of `theme.radius` or any valid CSS value to set `border-radius`, numbers are converted to rem, `theme.defaultRadius` by default */\n  radius?: MantineRadius;\n\n  /** Determines whether files capturing should be disabled, `false` by default */\n  disabled?: boolean;\n\n  /** Called when any files are dropped to the dropzone */\n  onDropAny?: (files: FileWithPath[], fileRejections: FileRejection[]) => void;\n\n  /** Called when valid files are dropped to the dropzone */\n  onDrop: (files: FileWithPath[]) => void;\n\n  /** Called when dropped files do not meet file restrictions */\n  onReject?: (fileRejections: FileRejection[]) => void;\n\n  /** Determines whether a loading overlay should be displayed over the dropzone, `false` by default */\n  loading?: boolean;\n\n  /** Mime types of the files that dropzone can accepts. By default, dropzone accepts all file types. */\n  accept?: Accept | string[];\n\n  /** A ref function which when called opens the file system file picker */\n  openRef?: React.ForwardedRef<() => void | undefined>;\n\n  /** Determines whether multiple files can be dropped to the dropzone or selected from file system picker, `true` by default */\n  multiple?: boolean;\n\n  /** Maximum file size in bytes */\n  maxSize?: number;\n\n  /** Name of the form control. Submitted with the form as part of a name/value pair. */\n  name?: string;\n\n  /** Maximum number of files that can be picked at once */\n  maxFiles?: number;\n\n  /** Set to autofocus the root element */\n  autoFocus?: boolean;\n\n  /** If `false`, disables click to open the native file selection dialog */\n  activateOnClick?: boolean;\n\n  /** If `false`, disables drag 'n' drop */\n  activateOnDrag?: boolean;\n\n  /** If `false`, disables Space/Enter to open the native file selection dialog. Note that it also stops tracking the focus state. */\n  activateOnKeyboard?: boolean;\n\n  /** If `false`, stops drag event propagation to parents */\n  dragEventsBubbling?: boolean;\n\n  /** Called when the `dragenter` event occurs */\n  onDragEnter?: (event: React.DragEvent<HTMLElement>) => void;\n\n  /** Called when the `dragleave` event occurs */\n  onDragLeave?: (event: React.DragEvent<HTMLElement>) => void;\n\n  /** Called when the `dragover` event occurs */\n  onDragOver?: (event: React.DragEvent<HTMLElement>) => void;\n\n  /** Called when user closes the file selection dialog with no selection */\n  onFileDialogCancel?: () => void;\n\n  /** Called when user opens the file selection dialog */\n  onFileDialogOpen?: () => void;\n\n  /** If `false`, allow dropped items to take over the current browser window */\n  preventDropOnDocument?: boolean;\n\n  /** Set to true to use the File System Access API to open the file picker instead of using an <input type=\"file\"> click event, defaults to true */\n  useFsAccessApi?: boolean;\n\n  /** Use this to provide a custom file aggregator */\n  getFilesFromEvent?: (event: DropEvent) => Promise<Array<File | DataTransferItem>>;\n\n  /** Custom validation function. It must return null if there's no errors. */\n  validator?: <T extends File>(file: T) => FileError | FileError[] | null;\n\n  /** Determines whether pointer events should be enabled on the inner element, `false` by default */\n  enablePointerEvents?: boolean;\n\n  /** Props passed down to the Loader component */\n  loaderProps?: LoaderProps;\n}\n\nexport type DropzoneFactory = Factory<{\n  props: DropzoneProps;\n  ref: HTMLDivElement;\n  stylesNames: DropzoneStylesNames;\n  vars: DropzoneCssVariables;\n  staticComponents: {\n    Accept: typeof DropzoneAccept;\n    Idle: typeof DropzoneIdle;\n    Reject: typeof DropzoneReject;\n    FullScreen: DropzoneFullScreenType;\n  };\n}>;\n\nconst defaultProps: Partial<DropzoneProps> = {\n  loading: false,\n  multiple: true,\n  maxSize: Infinity,\n  autoFocus: false,\n  activateOnClick: true,\n  activateOnDrag: true,\n  dragEventsBubbling: true,\n  activateOnKeyboard: true,\n  useFsAccessApi: true,\n  variant: 'light',\n  rejectColor: 'red',\n};\n\nconst varsResolver = createVarsResolver<DropzoneFactory>(\n  (theme, { radius, variant, acceptColor, rejectColor }) => {\n    const acceptColors = theme.variantColorResolver({\n      color: acceptColor || theme.primaryColor,\n      theme,\n      variant: variant!,\n    });\n\n    const rejectColors = theme.variantColorResolver({\n      color: rejectColor || 'red',\n      theme,\n      variant: variant!,\n    });\n\n    return {\n      root: {\n        '--dropzone-radius': getRadius(radius),\n        '--dropzone-accept-color': acceptColors.color,\n        '--dropzone-accept-bg': acceptColors.background,\n        '--dropzone-reject-color': rejectColors.color,\n        '--dropzone-reject-bg': rejectColors.background,\n      },\n    };\n  }\n);\n\nexport const Dropzone = factory<DropzoneFactory>((_props, ref) => {\n  const props = useProps('Dropzone', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    radius,\n    disabled,\n    loading,\n    multiple,\n    maxSize,\n    accept,\n    children,\n    onDropAny,\n    onDrop,\n    onReject,\n    openRef,\n    name,\n    maxFiles,\n    autoFocus,\n    activateOnClick,\n    activateOnDrag,\n    dragEventsBubbling,\n    activateOnKeyboard,\n    onDragEnter,\n    onDragLeave,\n    onDragOver,\n    onFileDialogCancel,\n    onFileDialogOpen,\n    preventDropOnDocument,\n    useFsAccessApi,\n    getFilesFromEvent,\n    validator,\n    rejectColor,\n    acceptColor,\n    enablePointerEvents,\n    loaderProps,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<DropzoneFactory>({\n    name: 'Dropzone',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const { getRootProps, getInputProps, isDragAccept, isDragReject, open } = useDropzone({\n    onDrop: onDropAny,\n    onDropAccepted: onDrop,\n    onDropRejected: onReject,\n    disabled: disabled || loading,\n    accept: Array.isArray(accept) ? accept.reduce((r, key) => ({ ...r, [key]: [] }), {}) : accept,\n    multiple,\n    maxSize,\n    maxFiles,\n    autoFocus,\n    noClick: !activateOnClick,\n    noDrag: !activateOnDrag,\n    noDragEventsBubbling: !dragEventsBubbling,\n    noKeyboard: !activateOnKeyboard,\n    onDragEnter,\n    onDragLeave,\n    onDragOver,\n    onFileDialogCancel,\n    onFileDialogOpen,\n    preventDropOnDocument,\n    useFsAccessApi,\n    validator,\n    ...(getFilesFromEvent ? { getFilesFromEvent } : null),\n  });\n\n  assignRef(openRef, open);\n\n  const isIdle = !isDragAccept && !isDragReject;\n\n  return (\n    <DropzoneProvider value={{ accept: isDragAccept, reject: isDragReject, idle: isIdle }}>\n      <Box\n        {...getRootProps({ ref })}\n        {...getStyles('root', { focusable: true })}\n        {...others}\n        mod={{\n          accept: isDragAccept,\n          reject: isDragReject,\n          idle: isIdle,\n          loading,\n          'activate-on-click': activateOnClick,\n        }}\n      >\n        <LoadingOverlay\n          visible={loading}\n          overlayProps={{ radius }}\n          unstyled={unstyled}\n          loaderProps={loaderProps}\n        />\n        <input {...getInputProps()} name={name} />\n        <div {...getStyles('inner')} data-enable-pointer-events={enablePointerEvents || undefined}>\n          {children}\n        </div>\n      </Box>\n    </DropzoneProvider>\n  );\n});\n\nDropzone.classes = classes;\nDropzone.displayName = '@mantine/dropzone/Dropzone';\nDropzone.Accept = DropzoneAccept;\nDropzone.Idle = DropzoneIdle;\nDropzone.Reject = DropzoneReject;\n"],"mappings":";;;;;;;;;AAkBA,MAAMA,YAAY,GAAG;EACnBC,OAAO,EAAE,KAAK;EACdC,QAAQ,EAAE,IAAI;EACdC,OAAO,EAAEC,QAAQ;EACjBC,SAAS,EAAE,KAAK;EAChBC,eAAe,EAAE,IAAI;EACrBC,cAAc,EAAE,IAAI;EACpBC,kBAAkB,EAAE,IAAI;EACxBC,kBAAkB,EAAE,IAAI;EACxBC,cAAc,EAAE,IAAI;EACpBC,OAAO,EAAE,OAAO;EAChBC,WAAW,EAAE;AACf,CAAC;AACD,MAAMC,YAAY,GAAGC,kBAAkB,CACrC,CAACC,KAAK,EAAE;EAAEC,MAAM;EAAEL,OAAO;EAAEM,WAAW;EAAEL;AAAW,CAAE,KAAK;EACxD,MAAMM,YAAY,GAAGH,KAAK,CAACI,oBAAoB,CAAC;IAC9CC,KAAK,EAAEH,WAAW,IAAIF,KAAK,CAACM,YAAY;IACxCN,KAAK;IACLJ;EACN,CAAK,CAAC;EACF,MAAMW,YAAY,GAAGP,KAAK,CAACI,oBAAoB,CAAC;IAC9CC,KAAK,EAAER,WAAW,IAAI,KAAK;IAC3BG,KAAK;IACLJ;EACN,CAAK,CAAC;EACF,OAAO;IACLY,IAAI,EAAE;MACJ,mBAAmB,EAAEC,SAAS,CAACR,MAAM,CAAC;MACtC,yBAAyB,EAAEE,YAAY,CAACE,KAAK;MAC7C,sBAAsB,EAAEF,YAAY,CAACO,UAAU;MAC/C,yBAAyB,EAAEH,YAAY,CAACF,KAAK;MAC7C,sBAAsB,EAAEE,YAAY,CAACG;IACtC;EACP,CAAK;AACF,CACH,CAAC;AACW,MAACC,QAAQ,GAAGC,OAAO,CAAC,CAACC,MAAM,EAAEC,GAAG,KAAK;EAC/C,MAAMC,KAAK,GAAGC,QAAQ,CAAC,UAAU,EAAE/B,YAAY,EAAE4B,MAAM,CAAC;EACxD,MAAM;IACJI,UAAU;IACVC,SAAS;IACTC,KAAK;IACLC,MAAM;IACNC,QAAQ;IACRC,IAAI;IACJrB,MAAM;IACNsB,QAAQ;IACRrC,OAAO;IACPC,QAAQ;IACRC,OAAO;IACPoC,MAAM;IACNC,QAAQ;IACRC,SAAS;IACTC,MAAM;IACNC,QAAQ;IACRC,OAAO;IACPC,IAAI;IACJC,QAAQ;IACRzC,SAAS;IACTC,eAAe;IACfC,cAAc;IACdC,kBAAkB;IAClBC,kBAAkB;IAClBsC,WAAW;IACXC,WAAW;IACXC,UAAU;IACVC,kBAAkB;IAClBC,gBAAgB;IAChBC,qBAAqB;IACrB1C,cAAc;IACd2C,iBAAiB;IACjBC,SAAS;IACT1C,WAAW;IACXK,WAAW;IACXsC,mBAAmB;IACnBC,WAAW;IACX,GAAGC;EACJ,IAAG3B,KAAK;EACT,MAAM4B,SAAS,GAAGC,SAAS,CAAC;IAC1Bd,IAAI,EAAE,UAAU;IAChBe,OAAO;IACP9B,KAAK;IACLG,SAAS;IACTC,KAAK;IACLF,UAAU;IACVG,MAAM;IACNC,QAAQ;IACRC,IAAI;IACJxB;EACJ,CAAG,CAAC;EACF,MAAM;IAAEgD,YAAY;IAAEC,aAAa;IAAEC,YAAY;IAAEC,YAAY;IAAEC;EAAM,IAAGC,WAAW,CAAC;IACpFxB,MAAM,EAAED,SAAS;IACjB0B,cAAc,EAAEzB,MAAM;IACtB0B,cAAc,EAAEzB,QAAQ;IACxBL,QAAQ,EAAEA,QAAQ,IAAIrC,OAAO;IAC7BsC,MAAM,EAAE8B,KAAK,CAACC,OAAO,CAAC/B,MAAM,CAAC,GAAGA,MAAM,CAACgC,MAAM,CAAC,CAACC,CAAC,EAAEC,GAAG,MAAM;MAAE,GAAGD,CAAC;MAAE,CAACC,GAAG,GAAG;IAAE,CAAE,CAAC,EAAE,CAAE,EAAC,GAAGlC,MAAM;IAC7FrC,QAAQ;IACRC,OAAO;IACP2C,QAAQ;IACRzC,SAAS;IACTqE,OAAO,EAAE,CAACpE,eAAe;IACzBqE,MAAM,EAAE,CAACpE,cAAc;IACvBqE,oBAAoB,EAAE,CAACpE,kBAAkB;IACzCqE,UAAU,EAAE,CAACpE,kBAAkB;IAC/BsC,WAAW;IACXC,WAAW;IACXC,UAAU;IACVC,kBAAkB;IAClBC,gBAAgB;IAChBC,qBAAqB;IACrB1C,cAAc;IACd4C,SAAS;IACT,IAAGD,iBAAiB,GAAG;MAAEA;IAAiB,CAAE,GAAG,IAAI;EACvD,CAAG,CAAC;EACFyB,SAAS,CAAClC,OAAO,EAAEqB,IAAI,CAAC;EACxB,MAAMc,MAAM,GAAG,CAAChB,YAAY,IAAI,CAACC,YAAY;EAC7C,sBAAuBgB,KAAK,CAACC,aAAa,CAACC,gBAAgB,EAAE;IAAEC,KAAK,EAAE;MAAE5C,MAAM,EAAEwB,YAAY;MAAEqB,MAAM,EAAEpB,YAAY;MAAEqB,IAAI,EAAEN;IAAM;EAAI,kBAAkBC,KAAK,CAACC,aAAa,CACvKK,GAAG,EACH;IACE,GAAGzB,YAAY,CAAC;MAAEhC;IAAG,CAAE,CAAC;IACxB,GAAG6B,SAAS,CAAC,MAAM,EAAE;MAAE6B,SAAS,EAAE;IAAI,CAAE,CAAC;IACzC,GAAG9B,MAAM;IACT+B,GAAG,EAAE;MACHjD,MAAM,EAAEwB,YAAY;MACpBqB,MAAM,EAAEpB,YAAY;MACpBqB,IAAI,EAAEN,MAAM;MACZ9E,OAAO;MACP,mBAAmB,EAAEK;IACtB;EACF,GACe,eAAA0E,KAAK,CAACC,aAAa,CACjCQ,cAAc,EACd;IACEC,OAAO,EAAEzF,OAAO;IAChB0F,YAAY,EAAE;MAAE3E;IAAQ;IACxBoB,QAAQ;IACRoB;EACD,CACF,GACL,eAAoBwB,KAAK,CAACC,aAAa,CAAC,OAAO,EAAE;IAAE,GAAGnB,aAAa,EAAE;IAAEjB;EAAI,CAAE,CAAC,EAC1D,eAAAmC,KAAK,CAACC,aAAa,CAAC,KAAK,EAAE;IAAE,GAAGvB,SAAS,CAAC,OAAO,CAAC;IAAE,4BAA4B,EAAEH,mBAAmB,IAAI,KAAK;EAAC,CAAE,EAAEf,QAAQ,CAC/I,CAAG,CAAC;AACJ,CAAC,CAAE;AACHd,QAAQ,CAACkC,OAAO,GAAGA,OAAO;AAC1BlC,QAAQ,CAACkE,WAAW,GAAG,4BAA4B;AACnDlE,QAAQ,CAACmE,MAAM,GAAGC,cAAc;AAChCpE,QAAQ,CAACqE,IAAI,GAAGC,YAAY;AAC5BtE,QAAQ,CAACuE,MAAM,GAAGC,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}