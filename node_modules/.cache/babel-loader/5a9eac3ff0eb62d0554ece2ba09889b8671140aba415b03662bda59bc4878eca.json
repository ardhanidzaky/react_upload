{"ast":null,"code":"var _jsxFileName = \"/Users/finazaria/Documents/TA Code - Interface/thesis-ortho-proto/react_upload/src/components/Result.js\";\n// import { Card, CardHeader, CardBody, CardFooter, SimpleGrid, Text, Heading, Grid } from '@chakra-ui/react'\n\n// function Result( {results} ) {\n//     return (\n//         <Grid mt={15} templateColumns='repeat(3, 1fr)' gap={8}>\n//             <Card>\n//                 <CardHeader>\n//                     <Heading size='md'>Diagnosis Result</Heading>\n//                 </CardHeader>\n//             <CardBody textAlign={'left'}>\n//                 <Text>Tipe Wajah:</Text>\n//                 <Text>Simetris Wajah:</Text>\n//                 <Text>Keseimbangan Transversal:</Text>\n//                 <Text>Keseimbangan Vertikal:</Text>\n//             </CardBody>\n//             </Card>\n\n//             <Card>\n//                 <CardHeader>\n//                     <Heading size='md'>Diagnosis Result</Heading>\n//                 </CardHeader>\n//             <CardBody textAlign={'left'}>\n//                 <Text>Garis Midline Wajah:</Text>\n//                 <Text>Bukal Koridor:</Text>\n//                 <Text>Kurva Senyum:</Text>\n//                 <Text>Garis Senyum:</Text>\n//             </CardBody>\n//             </Card>\n\n//             <Card>\n//                 <CardHeader>\n//                     <Heading size='md'>Diagnosis Result</Heading>\n//                 </CardHeader>\n//             <CardBody textAlign={'left'}>\n//                 <Text>Profil Wajah:</Text>\n//                 <Text>Sudut Mentolabial:</Text>\n//                 <Text>Sudut Nasolabial:</Text>\n//             </CardBody>\n//             </Card>\n\n//         </Grid>\n//     );\n// }\n\n// export default Result;\n\nimport { Card, CardHeader, CardBody, Heading, Text, Grid } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Result({\n  task,\n  results\n}) {\n  const resultData = results[`${task} Results`];\n  return (\n    /*#__PURE__*/\n    // <Grid mt={15} templateColumns='repeat(3, 1fr)' gap={8}>\n    _jsxDEV(Grid, {\n      autoFlow: \"column dense\",\n      mt: 10,\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n          children: /*#__PURE__*/_jsxDEV(Heading, {\n            size: \"md\",\n            children: [task, \" Diagnosis Result\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n          textAlign: 'left',\n          children: Object.entries(resultData).map(([key, value], index) => /*#__PURE__*/_jsxDEV(Text, {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [key, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 29\n            }, this), \" \", value]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)\n  );\n}\n_c = Result;\nexport default Result;\nvar _c;\n$RefreshReg$(_c, \"Result\");","map":{"version":3,"names":["Card","CardHeader","CardBody","Heading","Text","Grid","jsxDEV","_jsxDEV","Result","task","results","resultData","autoFlow","mt","children","size","fileName","_jsxFileName","lineNumber","columnNumber","textAlign","Object","entries","map","key","value","index","_c","$RefreshReg$"],"sources":["/Users/finazaria/Documents/TA Code - Interface/thesis-ortho-proto/react_upload/src/components/Result.js"],"sourcesContent":["// import { Card, CardHeader, CardBody, CardFooter, SimpleGrid, Text, Heading, Grid } from '@chakra-ui/react'\n\n// function Result( {results} ) {\n//     return (\n//         <Grid mt={15} templateColumns='repeat(3, 1fr)' gap={8}>\n//             <Card>\n//                 <CardHeader>\n//                     <Heading size='md'>Diagnosis Result</Heading>\n//                 </CardHeader>\n//             <CardBody textAlign={'left'}>\n//                 <Text>Tipe Wajah:</Text>\n//                 <Text>Simetris Wajah:</Text>\n//                 <Text>Keseimbangan Transversal:</Text>\n//                 <Text>Keseimbangan Vertikal:</Text>\n//             </CardBody>\n//             </Card>\n            \n//             <Card>\n//                 <CardHeader>\n//                     <Heading size='md'>Diagnosis Result</Heading>\n//                 </CardHeader>\n//             <CardBody textAlign={'left'}>\n//                 <Text>Garis Midline Wajah:</Text>\n//                 <Text>Bukal Koridor:</Text>\n//                 <Text>Kurva Senyum:</Text>\n//                 <Text>Garis Senyum:</Text>\n//             </CardBody>\n//             </Card>\n            \n//             <Card>\n//                 <CardHeader>\n//                     <Heading size='md'>Diagnosis Result</Heading>\n//                 </CardHeader>\n//             <CardBody textAlign={'left'}>\n//                 <Text>Profil Wajah:</Text>\n//                 <Text>Sudut Mentolabial:</Text>\n//                 <Text>Sudut Nasolabial:</Text>\n//             </CardBody>\n//             </Card>\n            \n//         </Grid>\n//     );\n// }\n\n\n// export default Result;\n\nimport { Card, CardHeader, CardBody, Heading, Text, Grid } from '@chakra-ui/react';\n\nfunction Result({ task, results }) {\n    const resultData = results[`${task} Results`];\n\n    return (\n        // <Grid mt={15} templateColumns='repeat(3, 1fr)' gap={8}>\n        <Grid autoFlow=\"column dense\" mt={10}>\n            <Card>\n                <CardHeader>\n                    <Heading size='md'>{task} Diagnosis Result</Heading>\n                </CardHeader>\n                <CardBody textAlign={'left'}>\n                    {Object.entries(resultData).map(([key, value], index) => (\n                        <Text key={index}>\n                            <strong>{key}:</strong> {value}\n                        </Text>\n                    ))}\n                </CardBody>\n            </Card>\n        </Grid>\n    );\n}\n\nexport default Result;\n\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;;AAEA,SAASA,IAAI,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,IAAI,EAAEC,IAAI,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnF,SAASC,MAAMA,CAAC;EAAEC,IAAI;EAAEC;AAAQ,CAAC,EAAE;EAC/B,MAAMC,UAAU,GAAGD,OAAO,CAAE,GAAED,IAAK,UAAS,CAAC;EAE7C;IAAA;IACI;IACAF,OAAA,CAACF,IAAI;MAACO,QAAQ,EAAC,cAAc;MAACC,EAAE,EAAE,EAAG;MAAAC,QAAA,eACjCP,OAAA,CAACP,IAAI;QAAAc,QAAA,gBACDP,OAAA,CAACN,UAAU;UAAAa,QAAA,eACPP,OAAA,CAACJ,OAAO;YAACY,IAAI,EAAC,IAAI;YAAAD,QAAA,GAAEL,IAAI,EAAC,mBAAiB;UAAA;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5C,CAAC,eACbZ,OAAA,CAACL,QAAQ;UAACkB,SAAS,EAAE,MAAO;UAAAN,QAAA,EACvBO,MAAM,CAACC,OAAO,CAACX,UAAU,CAAC,CAACY,GAAG,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,EAAEC,KAAK,kBAChDnB,OAAA,CAACH,IAAI;YAAAU,QAAA,gBACDP,OAAA;cAAAO,QAAA,GAASU,GAAG,EAAC,GAAC;YAAA;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,KAAC,EAACM,KAAK;UAAA,GADvBC,KAAK;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEV,CACT;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;AAEf;AAACQ,EAAA,GApBQnB,MAAM;AAsBf,eAAeA,MAAM;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}