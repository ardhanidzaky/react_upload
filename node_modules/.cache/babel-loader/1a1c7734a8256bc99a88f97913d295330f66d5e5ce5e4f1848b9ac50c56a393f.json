{"ast":null,"code":"'use client';\n\nimport React, { forwardRef, cloneElement } from 'react';\nimport { isElement } from '../../../core/utils/is-element/is-element.mjs';\nimport { createEventHandler } from '../../../core/utils/create-event-handler/create-event-handler.mjs';\nimport 'clsx';\nimport '@mantine/hooks';\nimport '../../../core/MantineProvider/Mantine.context.mjs';\nimport '../../../core/MantineProvider/default-theme.mjs';\nimport '../../../core/MantineProvider/MantineProvider.mjs';\nimport '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.mjs';\nimport '../../../core/Box/Box.mjs';\nimport '../../../core/DirectionProvider/DirectionProvider.mjs';\nimport { Popover } from '../../Popover/Popover.mjs';\nimport '../../Popover/PopoverDropdown/PopoverDropdown.mjs';\nimport '../../Popover/PopoverTarget/PopoverTarget.mjs';\nimport { useMenuContext } from '../Menu.context.mjs';\nconst defaultProps = {\n  refProp: \"ref\"\n};\nconst MenuTarget = forwardRef((props, ref) => {\n  const {\n    children,\n    refProp,\n    ...others\n  } = useProps(\"MenuTarget\", defaultProps, props);\n  if (!isElement(children)) {\n    throw new Error(\"Menu.Target component children should be an element or a component that accepts ref. Fragments, strings, numbers and other primitive values are not supported\");\n  }\n  const ctx = useMenuContext();\n  const onClick = createEventHandler(children.props.onClick, () => (ctx.trigger === \"click\" || ctx.trigger === \"click-hover\") && ctx.toggleDropdown());\n  const onMouseEnter = createEventHandler(children.props.onMouseEnter, () => (ctx.trigger === \"hover\" || ctx.trigger === \"click-hover\") && ctx.openDropdown());\n  const onMouseLeave = createEventHandler(children.props.onMouseLeave, () => (ctx.trigger === \"hover\" || ctx.trigger === \"click-hover\") && ctx.closeDropdown());\n  return /* @__PURE__ */React.createElement(Popover.Target, {\n    refProp,\n    popupType: \"menu\",\n    ref,\n    ...others\n  }, cloneElement(children, {\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    \"data-expanded\": ctx.opened ? true : void 0\n  }));\n});\nMenuTarget.displayName = \"@mantine/core/MenuTarget\";\nexport { MenuTarget };","map":{"version":3,"names":["defaultProps","refProp","MenuTarget","forwardRef","props","ref","children","others","useProps","isElement","Error","ctx","useMenuContext","onClick","createEventHandler","trigger","toggleDropdown","onMouseEnter","openDropdown","onMouseLeave","closeDropdown","React","createElement","Popover","Target","popupType","cloneElement","opened","displayName"],"sources":["/Users/finazaria/Documents/TA Code - Interface/thesis-ortho-proto/react_upload/node_modules/@mantine/core/src/components/Menu/MenuTarget/MenuTarget.tsx"],"sourcesContent":["import React, { cloneElement, forwardRef } from 'react';\nimport { createEventHandler, isElement, useProps } from '../../../core';\nimport { Popover } from '../../Popover';\nimport { useMenuContext } from '../Menu.context';\n\nexport interface MenuTargetProps {\n  /** Target element */\n  children: React.ReactNode;\n\n  /** Key of the prop that should be used to get element ref */\n  refProp?: string;\n}\n\nconst defaultProps: Partial<MenuTargetProps> = {\n  refProp: 'ref',\n};\n\nexport const MenuTarget = forwardRef<HTMLElement, MenuTargetProps>((props, ref) => {\n  const { children, refProp, ...others } = useProps('MenuTarget', defaultProps, props);\n\n  if (!isElement(children)) {\n    throw new Error(\n      'Menu.Target component children should be an element or a component that accepts ref. Fragments, strings, numbers and other primitive values are not supported'\n    );\n  }\n\n  const ctx = useMenuContext();\n\n  const onClick = createEventHandler(\n    children.props.onClick,\n    () => (ctx.trigger === 'click' || ctx.trigger === 'click-hover') && ctx.toggleDropdown()\n  );\n\n  const onMouseEnter = createEventHandler(\n    children.props.onMouseEnter,\n    () => (ctx.trigger === 'hover' || ctx.trigger === 'click-hover') && ctx.openDropdown()\n  );\n\n  const onMouseLeave = createEventHandler(\n    children.props.onMouseLeave,\n    () => (ctx.trigger === 'hover' || ctx.trigger === 'click-hover') && ctx.closeDropdown()\n  );\n\n  return (\n    <Popover.Target refProp={refProp} popupType=\"menu\" ref={ref} {...others}>\n      {cloneElement(children, {\n        onClick,\n        onMouseEnter,\n        onMouseLeave,\n        'data-expanded': ctx.opened ? true : undefined,\n      })}\n    </Popover.Target>\n  );\n});\n\nMenuTarget.displayName = '@mantine/core/MenuTarget';\n"],"mappings":";;;;;;;;;;;;;;;;;;AAKA,MAAMA,YAAY,GAAG;EACnBC,OAAO,EAAE;AACX,CAAC;AACW,MAACC,UAAU,GAAGC,UAAU,CAAC,CAACC,KAAK,EAAEC,GAAG,KAAK;EACnD,MAAM;IAAEC,QAAQ;IAAEL,OAAO;IAAE,GAAGM;EAAM,CAAE,GAAGC,QAAQ,CAAC,YAAY,EAAER,YAAY,EAAEI,KAAK,CAAC;EACpF,IAAI,CAACK,SAAS,CAACH,QAAQ,CAAC,EAAE;IACxB,MAAM,IAAII,KAAK,CACb,+JACN,CAAK;EACF;EACD,MAAMC,GAAG,GAAGC,cAAc,EAAE;EAC5B,MAAMC,OAAO,GAAGC,kBAAkB,CAChCR,QAAQ,CAACF,KAAK,CAACS,OAAO,EACtB,MAAM,CAACF,GAAG,CAACI,OAAO,KAAK,OAAO,IAAIJ,GAAG,CAACI,OAAO,KAAK,aAAa,KAAKJ,GAAG,CAACK,cAAc,CAAE,CAC5F,CAAG;EACD,MAAMC,YAAY,GAAGH,kBAAkB,CACrCR,QAAQ,CAACF,KAAK,CAACa,YAAY,EAC3B,MAAM,CAACN,GAAG,CAACI,OAAO,KAAK,OAAO,IAAIJ,GAAG,CAACI,OAAO,KAAK,aAAa,KAAKJ,GAAG,CAACO,YAAY,CAAE,CAC1F,CAAG;EACD,MAAMC,YAAY,GAAGL,kBAAkB,CACrCR,QAAQ,CAACF,KAAK,CAACe,YAAY,EAC3B,MAAM,CAACR,GAAG,CAACI,OAAO,KAAK,OAAO,IAAIJ,GAAG,CAACI,OAAO,KAAK,aAAa,KAAKJ,GAAG,CAACS,aAAa,CAAE,CAC3F,CAAG;EACD,sBAAuBC,KAAK,CAACC,aAAa,CAACC,OAAO,CAACC,MAAM,EAAE;IAAEvB,OAAO;IAAEwB,SAAS,EAAE,MAAM;IAAEpB,GAAG;IAAE,GAAGE;EAAM,CAAE,EAAEmB,YAAY,CAACpB,QAAQ,EAAE;IAChIO,OAAO;IACPI,YAAY;IACZE,YAAY;IACZ,eAAe,EAAER,GAAG,CAACgB,MAAM,GAAG,IAAI,GAAG,KAAK;EAC3C,EAAC,CAAC;AACL,CAAC,CAAE;AACHzB,UAAU,CAAC0B,WAAW,GAAG,0BAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}