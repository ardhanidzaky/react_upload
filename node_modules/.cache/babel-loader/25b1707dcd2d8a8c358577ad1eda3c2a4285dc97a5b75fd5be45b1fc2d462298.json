{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport { useId } from '@mantine/hooks';\nimport { getSize, getRadius } from '../../core/utils/get-size/get-size.mjs';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport { parseThemeColor } from '../../core/MantineProvider/color-functions/parse-theme-color/parse-theme-color.mjs';\nimport { getThemeColor } from '../../core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { extractStyleProps } from '../../core/Box/style-props/extract-style-props/extract-style-props.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { InlineInputClasses, InlineInput } from '../InlineInput/InlineInput.mjs';\nimport { useCheckboxGroupContext } from './CheckboxGroup.context.mjs';\nimport { CheckboxGroup } from './CheckboxGroup/CheckboxGroup.mjs';\nimport { CheckboxIcon } from './CheckIcon.mjs';\nimport classes from './Checkbox.module.css.mjs';\nconst defaultProps = {\n  labelPosition: \"right\",\n  icon: CheckboxIcon\n};\nconst varsResolver = createVarsResolver((theme, {\n  radius,\n  color,\n  size,\n  iconColor,\n  variant\n}) => {\n  const parsedColor = parseThemeColor({\n    color: color || theme.primaryColor,\n    theme\n  });\n  const outlineColor = parsedColor.isThemeColor && parsedColor.shade === void 0 ? `var(--mantine-color-${parsedColor.color}-outline)` : parsedColor.color;\n  return {\n    root: {\n      \"--checkbox-size\": getSize(size, \"checkbox-size\"),\n      \"--checkbox-radius\": radius === void 0 ? void 0 : getRadius(radius),\n      \"--checkbox-color\": variant === \"outline\" ? outlineColor : getThemeColor(color, theme),\n      \"--checkbox-icon-color\": iconColor ? getThemeColor(iconColor, theme) : void 0\n    }\n  };\n});\nconst Checkbox = factory((_props, ref) => {\n  const props = useProps(\"Checkbox\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    color,\n    label,\n    id,\n    size,\n    radius,\n    wrapperProps,\n    children,\n    checked,\n    labelPosition,\n    description,\n    error,\n    disabled,\n    variant,\n    indeterminate,\n    icon,\n    rootRef,\n    iconColor,\n    onChange,\n    ...others\n  } = props;\n  const ctx = useCheckboxGroupContext();\n  const _size = size || ctx?.size;\n  const Icon = icon;\n  const getStyles = useStyles({\n    name: \"Checkbox\",\n    props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  const {\n    styleProps,\n    rest\n  } = extractStyleProps(others);\n  const uuid = useId(id);\n  const contextProps = ctx ? {\n    checked: ctx.value.includes(rest.value),\n    onChange: event => {\n      ctx.onChange(event);\n      onChange?.(event);\n    }\n  } : {};\n  return /* @__PURE__ */React.createElement(InlineInput, {\n    ...getStyles(\"root\"),\n    __staticSelector: \"Checkbox\",\n    __stylesApiProps: props,\n    id: uuid,\n    size: _size,\n    labelPosition,\n    label,\n    description,\n    error,\n    disabled,\n    classNames,\n    styles,\n    unstyled,\n    \"data-checked\": contextProps.checked || checked || void 0,\n    variant,\n    ref: rootRef,\n    ...styleProps,\n    ...wrapperProps\n  }, /* @__PURE__ */React.createElement(Box, {\n    ...getStyles(\"inner\"),\n    mod: {\n      \"data-label-position\": labelPosition\n    }\n  }, /* @__PURE__ */React.createElement(Box, {\n    component: \"input\",\n    id: uuid,\n    ref,\n    checked,\n    disabled,\n    mod: {\n      error: !!error,\n      indeterminate\n    },\n    ...getStyles(\"input\", {\n      focusable: true,\n      variant\n    }),\n    onChange,\n    ...rest,\n    ...contextProps,\n    type: \"checkbox\"\n  }), /* @__PURE__ */React.createElement(Icon, {\n    indeterminate,\n    ...getStyles(\"icon\")\n  })));\n});\nCheckbox.classes = {\n  ...classes,\n  ...InlineInputClasses\n};\nCheckbox.displayName = \"@mantine/core/Checkbox\";\nCheckbox.Group = CheckboxGroup;\nexport { Checkbox };","map":{"version":3,"names":["defaultProps","labelPosition","icon","CheckboxIcon","varsResolver","createVarsResolver","theme","radius","color","size","iconColor","variant","parsedColor","parseThemeColor","primaryColor","outlineColor","isThemeColor","shade","root","getSize","getRadius","getThemeColor","Checkbox","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","label","id","wrapperProps","children","checked","description","error","disabled","indeterminate","rootRef","onChange","others","ctx","useCheckboxGroupContext","_size","Icon","getStyles","useStyles","name","classes","styleProps","rest","extractStyleProps","uuid","useId","contextProps","value","includes","event","React","createElement","InlineInput","__staticSelector","__stylesApiProps","Box","mod","component","focusable","type","InlineInputClasses","displayName","Group","CheckboxGroup"],"sources":["/Users/finazaria/Documents/TA Code - Interface/thesis-ortho-proto/react_upload/node_modules/@mantine/core/src/components/Checkbox/Checkbox.tsx"],"sourcesContent":["import React from 'react';\nimport { useId } from '@mantine/hooks';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  extractStyleProps,\n  factory,\n  Factory,\n  getRadius,\n  getSize,\n  getThemeColor,\n  MantineColor,\n  MantineRadius,\n  MantineSize,\n  parseThemeColor,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport { InlineInput, InlineInputClasses, InlineInputStylesNames } from '../InlineInput';\nimport { useCheckboxGroupContext } from './CheckboxGroup.context';\nimport { CheckboxGroup } from './CheckboxGroup/CheckboxGroup';\nimport { CheckboxIcon } from './CheckIcon';\nimport classes from './Checkbox.module.css';\n\nexport type CheckboxVariant = 'filled' | 'outline';\nexport type CheckboxStylesNames = 'icon' | 'inner' | 'input' | InlineInputStylesNames;\nexport type CheckboxCssVariables = {\n  root: '--checkbox-size' | '--checkbox-radius' | '--checkbox-color' | '--checkbox-icon-color';\n};\n\nexport interface CheckboxProps\n  extends BoxProps,\n    StylesApiProps<CheckboxFactory>,\n    ElementProps<'input', 'size'> {\n  /** Id used to bind input and label, if not passed, unique id will be generated instead */\n  id?: string;\n\n  /** Checkbox label */\n  label?: React.ReactNode;\n\n  /** Key of `theme.colors` or any valid CSS color to set input background color in checked state, `theme.primaryColor` by default */\n  color?: MantineColor;\n\n  /** Controls size of all elements */\n  size?: MantineSize | (string & {});\n\n  /** Key of `theme.radius` or any valid CSS value to set `border-radius,` `theme.defaultRadius` by default */\n  radius?: MantineRadius;\n\n  /** Props passed down to the root element */\n  wrapperProps?: Record<string, any>;\n\n  /** Position of the label relative to the input, `'right'` by default */\n  labelPosition?: 'left' | 'right';\n\n  /** Description displayed below the label */\n  description?: React.ReactNode;\n\n  /** Error displayed below the label */\n  error?: React.ReactNode;\n\n  /** Indeterminate state of checkbox, if set, `checked` prop is ignored */\n  indeterminate?: boolean;\n\n  /** Icon rendered when checkbox has checked or indeterminate state */\n  icon?: React.FC<{ indeterminate: boolean | undefined; className: string }>;\n\n  /** Assigns ref of the root element, can be used with `Tooltip` and other similar components */\n  rootRef?: React.ForwardedRef<HTMLDivElement>;\n\n  /** Key of `theme.colors` or any valid CSS color to set icon color, `theme.white` by default */\n  iconColor?: MantineColor;\n}\n\nexport type CheckboxFactory = Factory<{\n  props: CheckboxProps;\n  ref: HTMLInputElement;\n  stylesNames: CheckboxStylesNames;\n  vars: CheckboxCssVariables;\n  variant: CheckboxVariant;\n  staticComponents: {\n    Group: typeof CheckboxGroup;\n  };\n}>;\n\nconst defaultProps: Partial<CheckboxProps> = {\n  labelPosition: 'right',\n  icon: CheckboxIcon,\n};\n\nconst varsResolver = createVarsResolver<CheckboxFactory>(\n  (theme, { radius, color, size, iconColor, variant }) => {\n    const parsedColor = parseThemeColor({ color: color || theme.primaryColor, theme });\n    const outlineColor =\n      parsedColor.isThemeColor && parsedColor.shade === undefined\n        ? `var(--mantine-color-${parsedColor.color}-outline)`\n        : parsedColor.color;\n\n    return {\n      root: {\n        '--checkbox-size': getSize(size, 'checkbox-size'),\n        '--checkbox-radius': radius === undefined ? undefined : getRadius(radius),\n        '--checkbox-color': variant === 'outline' ? outlineColor : getThemeColor(color, theme),\n        '--checkbox-icon-color': iconColor ? getThemeColor(iconColor, theme) : undefined,\n      },\n    };\n  }\n);\n\nexport const Checkbox = factory<CheckboxFactory>((_props, ref) => {\n  const props = useProps('Checkbox', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    color,\n    label,\n    id,\n    size,\n    radius,\n    wrapperProps,\n    children,\n    checked,\n    labelPosition,\n    description,\n    error,\n    disabled,\n    variant,\n    indeterminate,\n    icon,\n    rootRef,\n    iconColor,\n    onChange,\n    ...others\n  } = props;\n\n  const ctx = useCheckboxGroupContext();\n  const _size = size || ctx?.size;\n  const Icon = icon!;\n\n  const getStyles = useStyles<CheckboxFactory>({\n    name: 'Checkbox',\n    props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const { styleProps, rest } = extractStyleProps(others);\n  const uuid = useId(id);\n\n  const contextProps = ctx\n    ? {\n        checked: ctx.value.includes(rest.value as string),\n        onChange: (event: React.ChangeEvent<HTMLInputElement>) => {\n          ctx.onChange(event);\n          onChange?.(event);\n        },\n      }\n    : {};\n\n  return (\n    <InlineInput\n      {...getStyles('root')}\n      __staticSelector=\"Checkbox\"\n      __stylesApiProps={props}\n      id={uuid}\n      size={_size}\n      labelPosition={labelPosition}\n      label={label}\n      description={description}\n      error={error}\n      disabled={disabled}\n      classNames={classNames}\n      styles={styles}\n      unstyled={unstyled}\n      data-checked={contextProps.checked || checked || undefined}\n      variant={variant}\n      ref={rootRef}\n      {...styleProps}\n      {...wrapperProps}\n    >\n      <Box {...getStyles('inner')} mod={{ 'data-label-position': labelPosition }}>\n        <Box\n          component=\"input\"\n          id={uuid}\n          ref={ref}\n          checked={checked}\n          disabled={disabled}\n          mod={{ error: !!error, indeterminate }}\n          {...getStyles('input', { focusable: true, variant })}\n          onChange={onChange}\n          {...rest}\n          {...contextProps}\n          type=\"checkbox\"\n        />\n\n        <Icon indeterminate={indeterminate} {...getStyles('icon')} />\n      </Box>\n    </InlineInput>\n  );\n});\n\nCheckbox.classes = { ...classes, ...InlineInputClasses };\nCheckbox.displayName = '@mantine/core/Checkbox';\nCheckbox.Group = CheckboxGroup;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}